# -*- coding: utf-8 -*-
"""credit risk

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IqLyeOoPz1dWplT6bJEcKTsSr_IZCmT8
"""

"""
Credit Risk Prediction Model
Goal: Predict whether a borrower will default on a loan.
Models: Logistic Regression & Random Forest
Dataset: credit_risk_dataset.csv (Kaggle dataset or similar)
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# 1. Load dataset
df = pd.read_csv("credit_risk_dataset.csv")

# Quick check
print("Dataset shape:", df.shape)
print("Missing values:\n", df.isnull().sum().head())

# 2. Handle categorical variables (if any)
for col in df.select_dtypes(include='object').columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col].astype(str))

# 3. Feature engineering
if "loan_amnt" in df.columns and "annual_inc" in df.columns:
    df['DebtToIncome'] = df['loan_amnt'] / (df['annual_inc'] + 1)

if "loan_amnt" in df.columns and "funded_amnt" in df.columns:
    df['LoanToValue'] = df['loan_amnt'] / (df['funded_amnt'] + 1)

# Drop rows with missing values
df = df.dropna()

# 4. Split dataset
X = df.drop(columns=['loan_status'])  # target: 0 = paid, 1 = default
y = df['loan_status']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

# 5. Scale + Train Logistic Regression
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

log_model = LogisticRegression(max_iter=1000)
log_model.fit(X_train_scaled, y_train)
y_pred_log = log_model.predict(X_test_scaled)

# 6. Train Random Forest
rf_model = RandomForestClassifier(n_estimators=200, max_depth=10, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

# 7. Evaluate Models
print("\nðŸ“Š Logistic Regression Results")
print("Accuracy:", round(accuracy_score(y_test, y_pred_log), 3))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_log))
print(classification_report(y_test, y_pred_log))

print("\nðŸŒ² Random Forest Results")
print("Accuracy:", round(accuracy_score(y_test, y_pred_rf), 3))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_rf))
print(classification_report(y_test, y_pred_rf))